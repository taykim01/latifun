/* eslint-disable @typescript-eslint/no-explicit-any */
// 프로젝트 생성하는 use case
"use server";
// import { z } from "zod";
import fetch from "node-fetch";
import crypto from "crypto";

// const CreateEmptyProjectRequest = z.object({
//   title: z.string(),
//   supabaseUrl: z.string(),
//   supabaseKey: z.string(),
//   vercelToken: z.string(),
// });

// type FormValues = z.infer<typeof CreateEmptyProjectRequest>;

interface VercelAPIError {
  error: {
    code: string;
    message: string;
  };
}

interface VercelProject {
  id: string;
  name: string;
  [key: string]: any; // 필요한 경우 추가 필드 정의
}

interface VercelDeployment {
  id: string;
  name: string;
  url: string;
  [key: string]: any; // 필요한 경우 추가 필드 정의
}

interface UploadedFile {
  file: string;
  sha: string;
}

export default async function createEmptyProjectUseCase() {
  const VERCEL_TOKEN = "WxEfexDHtSK4TPYqs4xCODyD";
  const PROJECT_NAME = "create_next_app";

  const files = [
    {
      filePath: "src/app/globals.css",
      content: `
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}
`,
    },
    {
      filePath: "src/app/layout.tsx",
      content: `
import type { Metadata } from "next";
import "./globals.css";


export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>
        {children}
      </body>
    </html>
  );
}
`,
    },
    {
      filePath: "src/app/page.tsx",
      content: `
export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <h1>IT WORKS</h1>
      </main>
    </div>
  );
}
`,
    },
    {
      filePath: ".eslintrc.json",
      content: `
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}
`,
    },
    {
      filePath: ".gitignore",
      content: `
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
`,
    },
    {
      filePath: "next-env.d.ts",
      content: `
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.
`,
    },
    {
      filePath: "next.config.mjs",
      content: `
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;
`,
    },
    {
      filePath: "package.json",
      content: `
{
  "name": "create-next-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "react": "^18",
    "react-dom": "^18",
    "next": "14.2.14"
  },
  "devDependencies": {
    "typescript": "^5",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "eslint": "^8",
    "eslint-config-next": "14.2.14"
  }
}
`,
    },
    {
      filePath: "postcss.config.mjs",
      content: `
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
`,
    },
    {
      filePath: "tailwind.config.ts",
      content: `
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};
export default config;
`,
    },
    {
      filePath: "tsconfig.json",
      content: `
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
`,
    },
  ];

  try {
    let project: VercelProject | null = null;
    let projectExists = false;

    // 프로젝트 존재 여부 확인
    console.log("프로젝트 존재 여부 확인 중...");
    const getProjectResponse = await fetch(
      `https://api.vercel.com/v10/projects/${PROJECT_NAME}`,
      {
        method: "GET",
        headers: {
          Authorization: `Bearer ${VERCEL_TOKEN}`,
        },
      }
    );

    if (getProjectResponse.ok) {
      project = (await getProjectResponse.json()) as VercelProject;
      projectExists = true;
      console.log(`프로젝트가 이미 존재합니다: ${project.name}`);
    } else {
      const error = (await getProjectResponse.json()) as VercelAPIError;
      if (error.error.code === "not_found") {
        console.log("프로젝트가 존재하지 않습니다. 새로운 프로젝트를 생성합니다.");
      } else {
        throw new Error(`프로젝트 조회 중 오류: ${error.error.message}`);
      }
    }

    // 프로젝트가 없으면 생성
    if (!projectExists) {
      console.log("프로젝트 생성 중...");
      const createProjectResponse = await fetch(
        "https://api.vercel.com/v10/projects",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${VERCEL_TOKEN}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: PROJECT_NAME,
            framework: "nextjs",
            publicSource: false,
          }),
        }
      );

      if (!createProjectResponse.ok) {
        const error = (await createProjectResponse.json()) as VercelAPIError;
        throw new Error(`프로젝트 생성 중 오류: ${error.error.message}`);
      }

      project = (await createProjectResponse.json()) as VercelProject;
      console.log(`프로젝트 생성 완료: ${project.name}`);
    }

    // 파일 업로드는 항상 수행
    console.log("파일 업로드 중...");
    const uploadedFiles: UploadedFile[] = [];

    for (const file of files) {
      const contentBuffer = Buffer.from(file.content.trim(), "utf8");
      const sha1sum = crypto
        .createHash("sha1")
        .update(contentBuffer)
        .digest("hex");
      const size = contentBuffer.length;

      const uploadResponse = await fetch("https://api.vercel.com/v2/files", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${VERCEL_TOKEN}`,
          "x-vercel-digest": sha1sum,
          "x-vercel-size": size.toString(),
          "Content-Length": size.toString(),
        },
        body: contentBuffer,
      });

      if (uploadResponse.ok || uploadResponse.status === 409) {
        uploadedFiles.push({
          file: file.filePath,
          sha: sha1sum,
        });
      } else {
        const error = (await uploadResponse.json()) as VercelAPIError;
        throw new Error(
          `파일 업로드 중 오류 (${file.filePath}): ${error.error.message}`
        );
      }
    }
    console.log("파일 업로드 완료");

    // 프로젝트가 새로 생성된 경우에만 환경 변수 설정
    if (!projectExists && project) {
      console.log("환경 변수 설정 중...");
      const envVariables = [
        {
          key: "SUPABASE_URL",
          value: "https://oraxcqearebvfzizcqgz.supabase.co",
          type: "plain",
          target: ["production", "preview", "development"],
        },
        {
          key: "SUPABASE_KEY",
          value:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9yYXhjcWVhcmVidmZ6aXpjcWd6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjY4ODE4NzksImV4cCI6MjA0MjQ1Nzg3OX0.cSTPSmZgxoxcc3lE2Yt_3I7f1sn2iHYccfC2KfX89c0",
          type: "plain",
          target: ["production", "preview", "development"],
        },
      ];

      for (const envVar of envVariables) {
        const envResponse = await fetch(
          `https://api.vercel.com/v10/projects/${project.id}/env`,
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${VERCEL_TOKEN}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify(envVar),
          }
        );

        if (!envResponse.ok) {
          const error = (await envResponse.json()) as VercelAPIError;
          throw new Error(
            `환경 변수 설정 중 오류 (${envVar.key}): ${error.error.message}`
          );
        }
      }
      console.log("환경 변수 설정 완료");
    } else {
      console.log("프로젝트가 이미 존재하므로 환경 변수 설정을 건너뜁니다.");
    }

    // 배포 생성
    if (!project) {
      throw new Error("프로젝트 정보가 없습니다.");
    }
    console.log("배포 생성 중...");
    const deploymentResponse = await fetch(
      "https://api.vercel.com/v13/deployments",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${VERCEL_TOKEN}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: PROJECT_NAME,
          files: uploadedFiles,
          project: project.id,
          target: "production",
        }),
      }
    );

    if (!deploymentResponse.ok) {
      const error = (await deploymentResponse.json()) as VercelAPIError;
      throw new Error(`배포 생성 중 오류: ${error.error.message}`);
    }

    const deployment = (await deploymentResponse.json()) as VercelDeployment;
    console.log(`배포 생성 완료: ${deployment.url}`);

    // 배포된 프로젝트의 URL 반환
    return deployment.url;
  } catch (error) {
    console.error(error);
    throw error;
  }
}
